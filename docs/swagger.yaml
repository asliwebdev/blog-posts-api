definitions:
  models.Comment:
    properties:
      content:
        type: string
      created_at:
        type: string
      id:
        type: string
      likes_count:
        type: integer
      parent_comment_id:
        type: string
      post_id:
        type: string
      updated_at:
        type: string
      user:
        $ref: '#/definitions/models.UserResponse'
      user_id:
        type: string
    required:
    - content
    - post_id
    type: object
  models.CreateComment:
    properties:
      content:
        type: string
      parent_comment_id:
        type: string
      post_id:
        type: string
    required:
    - content
    - post_id
    type: object
  models.CreatePost:
    properties:
      content:
        type: string
      title:
        type: string
      user_id:
        type: string
    required:
    - content
    - title
    - user_id
    type: object
  models.ErrResp:
    properties:
      error:
        type: string
    type: object
  models.LoginRequest:
    properties:
      email:
        type: string
      password:
        minLength: 4
        type: string
    required:
    - email
    - password
    type: object
  models.LoginResponse:
    properties:
      token:
        type: string
      userId:
        type: string
    type: object
  models.MessageResp:
    properties:
      message:
        type: string
    type: object
  models.Post:
    properties:
      comments_count:
        type: integer
      content:
        type: string
      created_at:
        type: string
      id:
        type: string
      likes_count:
        type: integer
      title:
        type: string
      updated_at:
        type: string
      user_id:
        type: string
    type: object
  models.PostWithoutCounts:
    properties:
      content:
        type: string
      created_at:
        type: string
      id:
        type: string
      title:
        type: string
      updated_at:
        type: string
      user_id:
        type: string
    type: object
  models.SignUpRequest:
    properties:
      email:
        type: string
      password:
        minLength: 4
        type: string
      username:
        type: string
    required:
    - email
    - password
    - username
    type: object
  models.SignUpResponse:
    properties:
      message:
        type: string
      token:
        type: string
      userId:
        type: string
    type: object
  models.UpdateComment:
    properties:
      content:
        type: string
      id:
        type: string
      user_id:
        type: string
    required:
    - content
    - id
    type: object
  models.UpdateCommentSwag:
    properties:
      content:
        type: string
      id:
        type: string
    required:
    - content
    - id
    type: object
  models.UpdatePost:
    properties:
      content:
        type: string
      title:
        type: string
    required:
    - content
    - title
    type: object
  models.UpdateUser:
    properties:
      email:
        type: string
      id:
        type: string
      password:
        type: string
      username:
        type: string
    required:
    - email
    - username
    type: object
  models.UpdateUserResp:
    properties:
      message:
        type: string
      user:
        $ref: '#/definitions/models.UpdateUser'
    type: object
  models.UpdateUserSwag:
    properties:
      email:
        type: string
      password:
        type: string
      username:
        type: string
    required:
    - email
    - username
    type: object
  models.User:
    properties:
      created_at:
        type: string
      email:
        type: string
      follower_count:
        type: integer
      following_count:
        type: integer
      id:
        type: string
      password:
        minLength: 4
        type: string
      updated_at:
        type: string
      username:
        type: string
    required:
    - email
    - password
    - username
    type: object
  models.UserResponse:
    properties:
      email:
        type: string
      id:
        type: string
      username:
        type: string
    type: object
  models.UserWithoutCounts:
    properties:
      created_at:
        type: string
      email:
        type: string
      id:
        type: string
      password:
        minLength: 4
        type: string
      updated_at:
        type: string
      username:
        type: string
    required:
    - email
    - password
    - username
    type: object
host: localhost:8080
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: Testing Swagger APIs.
  title: Blog Posts API
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Authenticate a user using their email and password.
      parameters:
      - description: Login credentials
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Successful login response with token and user ID
          schema:
            $ref: '#/definitions/models.LoginResponse'
        "400":
          description: Invalid input format or missing fields
          schema:
            $ref: '#/definitions/models.ErrResp'
        "401":
          description: Invalid email or password
          schema:
            $ref: '#/definitions/models.ErrResp'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.ErrResp'
      summary: User login
      tags:
      - auth
  /auth/signup:
    post:
      consumes:
      - application/json
      description: Creates a new user account.
      parameters:
      - description: Sign-up details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.SignUpRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SignUpResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrResp'
        "409":
          description: Username or Email exist
          schema:
            $ref: '#/definitions/models.ErrResp'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.ErrResp'
      summary: User sign-up
      tags:
      - auth
  /comments:
    post:
      consumes:
      - application/json
      description: Create a comment for a specific post
      parameters:
      - description: Comment body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.CreateComment'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.MessageResp'
        "400":
          description: Invalid input
          schema:
            $ref: '#/definitions/models.ErrResp'
        "500":
          description: Failed to create comment
          schema:
            $ref: '#/definitions/models.ErrResp'
      security:
      - BearerAuth: []
      summary: Create a new comment
      tags:
      - comments
    put:
      consumes:
      - application/json
      description: Update the content of an existing comment
      parameters:
      - description: Updated comment data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.UpdateCommentSwag'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UpdateComment'
        "400":
          description: Invalid input
          schema:
            $ref: '#/definitions/models.ErrResp'
        "500":
          description: Failed to update comment
          schema:
            $ref: '#/definitions/models.ErrResp'
      security:
      - BearerAuth: []
      summary: Update a comment
      tags:
      - comments
  /comments/{id}:
    delete:
      description: Delete a comment by its ID
      parameters:
      - description: Comment ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Comment deleted successfully
          schema:
            $ref: '#/definitions/models.MessageResp'
        "400":
          description: Invalid comment ID
          schema:
            $ref: '#/definitions/models.ErrResp'
        "403":
          description: Not authorized
          schema:
            $ref: '#/definitions/models.ErrResp'
        "500":
          description: Failed to delete comment
          schema:
            $ref: '#/definitions/models.ErrResp'
      security:
      - BearerAuth: []
      summary: Delete a comment
      tags:
      - comments
  /comments/{postId}:
    get:
      description: Retrieve all comments associated with a post
      parameters:
      - description: Post ID
        in: path
        name: postId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Comment'
            type: array
        "400":
          description: Invalid post ID
          schema:
            $ref: '#/definitions/models.ErrResp'
        "500":
          description: Failed to fetch comments
          schema:
            $ref: '#/definitions/models.ErrResp'
      security:
      - BearerAuth: []
      summary: Get comments by post ID
      tags:
      - comments
  /posts:
    post:
      consumes:
      - application/json
      description: Creates a new post with the provided details.
      parameters:
      - description: Post creation payload
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.CreatePost'
      produces:
      - application/json
      responses:
        "201":
          description: Post created successfully
          schema:
            $ref: '#/definitions/models.MessageResp'
        "400":
          description: Invalid input
          schema:
            $ref: '#/definitions/models.ErrResp'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.ErrResp'
      security:
      - BearerAuth: []
      summary: Create a new post
      tags:
      - posts
  /posts/{id}:
    delete:
      description: Deletes a post using its unique ID.
      parameters:
      - description: Post ID (UUID)
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Post deleted successfully
          schema:
            $ref: '#/definitions/models.MessageResp'
        "400":
          description: Invalid post ID
          schema:
            $ref: '#/definitions/models.ErrResp'
        "404":
          description: Post not found
          schema:
            $ref: '#/definitions/models.ErrResp'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.ErrResp'
      security:
      - BearerAuth: []
      summary: Delete a post
      tags:
      - posts
    get:
      description: Fetches the details of a post using its unique ID.
      parameters:
      - description: Post ID (UUID)
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Post details
          schema:
            $ref: '#/definitions/models.Post'
        "400":
          description: Invalid post ID
          schema:
            $ref: '#/definitions/models.ErrResp'
        "404":
          description: Post not found
          schema:
            $ref: '#/definitions/models.ErrResp'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.ErrResp'
      security:
      - BearerAuth: []
      summary: Get a post by ID
      tags:
      - posts
    put:
      consumes:
      - application/json
      description: Updates the details of a post using its unique ID.
      parameters:
      - description: Post ID (UUID)
        in: path
        name: id
        required: true
        type: string
      - description: Post update payload
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.UpdatePost'
      produces:
      - application/json
      responses:
        "200":
          description: Post updated successfully
          schema:
            $ref: '#/definitions/models.MessageResp'
        "400":
          description: Invalid input or post ID
          schema:
            $ref: '#/definitions/models.ErrResp'
        "404":
          description: Post not found
          schema:
            $ref: '#/definitions/models.ErrResp'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.ErrResp'
      security:
      - BearerAuth: []
      summary: Update a post
      tags:
      - posts
  /posts/feed:
    get:
      description: Fetches posts for the authenticated user's feed.
      produces:
      - application/json
      responses:
        "200":
          description: List of feed posts
          schema:
            items:
              $ref: '#/definitions/models.PostWithoutCounts'
            type: array
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.ErrResp'
      security:
      - BearerAuth: []
      summary: Get feed posts
      tags:
      - posts
  /posts/user/{id}:
    get:
      description: Fetches all posts created by a specific user.
      parameters:
      - description: User ID (UUID)
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of user's posts
          schema:
            items:
              $ref: '#/definitions/models.PostWithoutCounts'
            type: array
        "400":
          description: Invalid user ID
          schema:
            $ref: '#/definitions/models.ErrResp'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.ErrResp'
      security:
      - BearerAuth: []
      summary: Get a user's posts
      tags:
      - posts
  /users:
    get:
      description: Retrieve a list of all registered users.
      produces:
      - application/json
      responses:
        "200":
          description: List of users
          schema:
            items:
              $ref: '#/definitions/models.UserWithoutCounts'
            type: array
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.ErrResp'
      security:
      - BearerAuth: []
      summary: Get all users
      tags:
      - users
  /users/{id}:
    delete:
      description: Delete a user by their UUID.
      parameters:
      - description: User ID (UUID)
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: User deleted successfully
          schema:
            $ref: '#/definitions/models.MessageResp'
        "400":
          description: Invalid user ID format
          schema:
            $ref: '#/definitions/models.ErrResp'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/models.ErrResp'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.ErrResp'
      security:
      - BearerAuth: []
      summary: Delete a user
      tags:
      - users
    get:
      description: Retrieve user details by their UUID.
      parameters:
      - description: User ID (UUID)
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: User details
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Invalid user ID format
          schema:
            $ref: '#/definitions/models.ErrResp'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/models.ErrResp'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.ErrResp'
      security:
      - BearerAuth: []
      summary: Get a user by ID
      tags:
      - users
    put:
      consumes:
      - application/json
      description: Update details of a user by their UUID.
      parameters:
      - description: User ID (UUID)
        in: path
        name: id
        required: true
        type: string
      - description: User update payload, provide password only it is updated
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.UpdateUserSwag'
      produces:
      - application/json
      responses:
        "200":
          description: User updated successfully
          schema:
            $ref: '#/definitions/models.UpdateUserResp'
        "400":
          description: Invalid input or user ID format
          schema:
            $ref: '#/definitions/models.ErrResp'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/models.ErrResp'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.ErrResp'
      security:
      - BearerAuth: []
      summary: Update a user
      tags:
      - users
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
